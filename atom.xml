<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Feng</title>
  
  <subtitle>time goes by</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-09T03:11:37.487Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhaofeng Shang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/04/08/fork/"/>
    <id>http://yoursite.com/2018/04/08/fork/</id>
    <published>2018-04-09T03:09:16.908Z</published>
    <updated>2018-04-09T03:11:37.487Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>sadsad</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>deterministic 和 determinat 有什么区别？</title>
    <link href="http://yoursite.com/2017/05/08/determinat-vs-deterministic/"/>
    <id>http://yoursite.com/2017/05/08/determinat-vs-deterministic/</id>
    <published>2017-05-08T23:06:05.000Z</published>
    <updated>2017-05-09T01:04:05.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>deterministic 和 determinat 翻译过来都是“确定性的”，但这并不代表它们可以互相混用，在并行计算的语境下，它们有着一些根本的差别。</p><a id="more"></a><p>从语源的角度来说，deterministic 的名词形式 <a href="https://www.wikiwand.com/en/Determinism" target="_blank" rel="noopener">determinism</a> 指的是哲学中的决定论，决定论声称万物的发展皆是（由上帝 / 物理规律）事先决定好的，没有改变的余地。而 determinat 的名词形式 <a href="https://www.wikiwand.com/en/Determinacy" target="_blank" rel="noopener">determinacy</a> 指的是集合论中一个关注游戏必胜策略的子领域，或者直接指代“拥有必胜策略”这一属性。可以从语源看出，determinism 强调“没有什么可以改变”，而 determinacy 则更专注于“结果无法改变”（所谓必胜）这一点。</p><p>因此，当计算机科学引入这些术语时，自然借鉴了其原先的语义。比如，“确定性算法”这个术语的英文为“deterministic algorithm”，其解释如下：</p><blockquote><p>In computer science, a deterministic algorithm is an algorithm which, given a particular input, will always produce the same output, with the underlying machine always passing through the same sequence of states.</p><footer><strong>Wikipedia</strong><cite><a href="https://en.wikipedia.org/wiki/Deterministic_algorithm" target="_blank" rel="noopener">en.wikipedia.org/wiki/Deterministic_algorithm</a></cite></footer></blockquote><p>该释义强调了确定性算法在给定输入的情况下的两个必要属性：</p><ol><li>永远产生相同的输出</li><li>永远产生相同的状态变化过程</li></ol><p>可以看出，deterministic 的“确定性”既包含了结果的确定性，也包含了过程的确定性。</p><p>相比之下，determinat 则没有过程的确定性这一层含义。看看这段对 Id 语言（一门函数式并行编程语言）的描述：</p><blockquote><p>Programs in the functional subset of Id are guaranteed to be determinate, by which we mean that that it is impossible for the programmer to write a program that, despite different schedules on different runs, produces two different outcomes.</p><footer><strong>Rishiyur S. Nikhil, 1991</strong><cite><a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.18.4920" target="_blank" rel="noopener">ID Language Reference Manual</a></cite></footer></blockquote><p>这段描述特别强调了 determinate 是无关调度与运行过程的，只求结果的确定性。而正是对执行过程的限制与否，造成了 deterministic 和 determinat 的在并行计算语境下的根本差异。</p><p>一段程序（或者一个抽象的执行过程），如果使用 deterministic 进行描述，那么构成它的指令的执行顺序和执行结果都是确定的，这意味着这段程序是很难并行化的。要在保证指令的执行顺序的前提下并行运行多条指令在逻辑上就是不可能的（但在实现上是可能的，比如通过将一条指令进行拆分，从而能够并行运行多条指令的不同部分）。而 determinate 则不同，它只要求执行结果是确定的，这意味着程序内部可以通过并行运行多条互相无依赖的指令进行并行化。</p><p>举个简单的例子，计算 <code>(1 + 2) * (3 + 4)</code>，如果程序是 deterministic 的，那么计算会包含三步：</p><ol><li>计算 <code>1 + 2</code></li><li>计算 <code>3 + 4</code></li><li>计算 <code>3 * 7</code></li></ol><p>而一个 determinate 的程序则能够通过并行化两步完成计算：</p><ol><li>计算 <code>1 + 2</code>，同时计算 <code>3 + 4</code></li><li>计算 <code>3 * 7</code></li></ol><p>容易推论，deterministic 的程序的运行时间取决于程序中的指令总数，而 determinate 的程序的运行时间取决于最长依赖路径的长度（假定资源无限）。这保证了 determinate 的程序能够充分利用系统的并行性进行加速。</p><p>总结来说，deterministic 和 determinate 都强调结果的确定性，但 deterministic 在此之上还要求执行过程的确定性。在表达“确定性”的场合，需要根据语义进行选择，而不是随意地混用它们[^1]。</p><p>[^1]: 最近有用 deterministic 替代 determinate 的趋势，在这种情况下，文献的作者通常对 deterministic 进行了分类或是对其使用语境进行了详细的描述</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;deterministic 和 determinat 翻译过来都是“确定性的”，但这并不代表它们可以互相混用，在并行计算的语境下，它们有着一些根本的差别。&lt;/p&gt;
    
    </summary>
    
      <category term="撒旦" scheme="http://yoursite.com/categories/%E6%92%92%E6%97%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>流计算核心概念解析之 window</title>
    <link href="http://yoursite.com/2017/04/19/introduce-the-concept-of-windowing-in-streaming-processing/"/>
    <id>http://yoursite.com/2017/04/19/introduce-the-concept-of-windowing-in-streaming-processing/</id>
    <published>2017-04-19T20:14:54.000Z</published>
    <updated>2017-04-19T21:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>流计算是当前备受关注的一个大数据研究与应用领域，旨在实时或近实时地处理大量无界数据。区别于批处理，流处理中处理的数据集是无界的，所以聚集操作（如 reduce、sum、count 等）无法应用于整个数据集，否则聚集操作的结果可能永远都不会输出。我们需要将无界的数据集切分成一些有界的片段，将聚集操作应用于这些片段，从而能够在无界的数据集上得到持续的聚集操作输出结果，这一切分过程即被称为 window。流计算领域的许多概念、系统设计、实现细节都围绕着 window 展开，window 的支持程度也是我们对众多的流计算框架进行选型的重要依据。要理解 window，我们需要回答以下关键问题：</p><ol><li>如何根据window进行数据划分？</li><li>如何定义在window相关的操作中涉及的时间概念？</li><li>如何输出基于window的操作的处理结果？</li></ol><p>下文将逐一回答这些关键问题，并在最后比较当前较热门的各流计算框架对 window 的支持程度。</p><a id="more"></a><h2 id="如何根据-window-进行数据划分？"><a href="#如何根据-window-进行数据划分？" class="headerlink" title="如何根据 window 进行数据划分？"></a>如何根据 window 进行数据划分？</h2><p>由于流计算中的数据一般具有时间上的先后关系，window 切分一般基于数据的时间关系进行，常见的 window 划分策略包括（见图1[^image1-copyright]）：</p><ul><li>Tumbling window（也称为 fixed window）。Tumbling window 按固定的时间间隔对数据进行划分，将同一时间区间内的数据归为同一 window，每个数据只会属于一个 window；</li><li>Sliding window。Sliding window 与 tumbling window 一样按固定时间间隔划分数据，每个时间区间被称为一个 window slide，而一个 window 区间可以包含多个 window slide，以固定的步长向后滑动，这意味着一个数据可以属于多个 window；</li><li>Session window。Session window 使用数据间的时间间隔进行 window 切分，一旦前后两个数据间的时间间隔超过指定间隔，即将它们划入两个不同的 window，这种 window 划分策略适用于将数据划分为多个在时间上密切相关的 session。</li></ul><p><img src="http://oo9foc9n0.bkt.clouddn.com/uchuhimo.me/blog/images/2017/04/windowing-strategies.jpg" alt="图1 window 策略"><br>图 1：window 策略</p><p>除了以基于时间进行划分外，基于数量进行划分的 window 划分策略也较常见。基于数量的划分策略主要包括 tumbling window 和 sliding window，只是将里面涉及的固定时间间隔替换为固定数量，这里不再赘述。</p><p>在支持 trigger 的系统（如 Google Cloud Dataflow 和 Flink）中，用户可以自定义 window 划分策略。例如，在 Google Cloud Dataflow（以下简称 Dataflow）中，用户可以根据时间、元素数目、数据内容（如是否包含换行符）等进行组合定义新的 trigger，从而根据具体业务场景灵活划分 window。</p><h2 id="如何定义在window相关的操作中涉及的时间概念？"><a href="#如何定义在window相关的操作中涉及的时间概念？" class="headerlink" title="如何定义在window相关的操作中涉及的时间概念？"></a>如何定义在window相关的操作中涉及的时间概念？</h2><p>当我们基于时间对数据进行划分时，我们是应该使用数据产生时的时间，还是数据进入系统时的时间，抑或是数据被某一操作处理时的时间？鉴于 window 操作涉及的时间概念如此复杂多样，流计算系统一般允许用户指定时间策略。常见的时间策略包含以下几种：</p><ul><li>Event time。Event time 指以数据自带的时间信息为作为时间基准，由于许多实时数据带有时间戳（如物联网设备的定时心跳数据），而围绕数据自带时间戳进行数据处理也是许多日志处理逻辑、周期统计逻辑的关键所在，event time 在流处理领域有着非常广泛的应用；</li><li>Processing time。Processing time 指以数据实际被处理的时间作为时间基准，由于实现简单，几乎所有流计算系统都提供支持，但由于数据什么时候被处理依赖于具体的系统执行情况，processing time 基本只用于 event time 不可用的情况（如数据不带时间信息、系统不支持 event time 等）或与 event time 配合使用；</li><li>Ingress time。Ingress time 指以数据进入流计算系统的时间作为时间基准，由于可以应用于无时间戳的数据、系统处理逻辑上类似于 event time 且能一定程度上避免 event time 数据乱序的问题，ingress time 在特定场景下可作为 event time 的合理替代方案。</li></ul><p>由于 event time 能最精确地描述大量业务场景下的时间概念，支持 event time 能极大提升流计算系统的业务支持能力。但 event time 是流计算领域的“潘多拉魔盒”，包含许多复杂而微妙的问题。由于 event time 和数据处理时的时刻没有顺序对应关系，因此需要处理数据乱序问题。我们需要在下一个 window 的数据已经到达的情况下继续保持上一 window，以等待乱序数据的到达。由于数据集是无界的，而乱序数据什么时候到达并没有任何的保证，因此可能需要保持住所有的 window，这显然是不现实的。解决这一问题的常见方案是使用 watermark，即在数据源发送数据的过程中，在适当的位置插入 watermark 时间戳，表示在该 watermark 之后到达的数据中不包含早于时间戳所标记的时刻之前的数据，如此一来在接收到 watermark 时，早于 watermark 时间戳的 window 就能够被处理和清理。但在实际情况中，watermark 往往是不精确的，即在 watermark 到达后仍会有早于该时间戳的数据到达，造成 late data 问题。而 late data 的处理方式在不同系统中千差万别，存在着直接丢弃、更新之前 window 的状态、覆盖之前 window 的状态等多种处理方式，这里不再一一详述。</p><h2 id="如何输出基于window的操作的处理结果？"><a href="#如何输出基于window的操作的处理结果？" class="headerlink" title="如何输出基于window的操作的处理结果？"></a>如何输出基于window的操作的处理结果？</h2><p>由于不同系统的 window 切分策略以及对 late data 的处理策略不同，同一 window 可能会出现一或多个输出结果的情况。在不支持 trigger 的系统中，如果直接丢弃 late data 或使用 late data 持续更新 window 输出结果，那么通常 window 处理结果是单输出的。一旦支持 trigger，则可能会出现在一个 window 中多次触发输出的情况，而使用 late data 覆盖或追加先前 window 结果的策略也会导致在 late data 出现时 window 多输出的情况。除了 Dataflow 和 Flink 外，现存的大部分系统是 window 单输出的。</p><h2 id="各流计算框架对window支持程度对比"><a href="#各流计算框架对window支持程度对比" class="headerlink" title="各流计算框架对window支持程度对比"></a>各流计算框架对window支持程度对比</h2><p>下表总结了各热门的流计算框架对window支持程度的对比：</p><table><thead><tr><th></th><th></th><th>Google Cloud Dataflow</th><th>Apache Flink</th><th>Apache Storm</th><th>Spark Structured Streaming</th><th>Spark Streaming</th><th>Kafka Streams</th></tr></thead><tbody><tr><td>版本</td><td>–[^dataflow-version]</td><td>1.1</td><td>1.0.0</td><td>Alpha</td><td>2.0.0</td><td>0.10.0</td></tr><tr><td>Tumbling window</td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><strong>支持</strong></td></tr><tr><td>Sliding window</td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><strong>支持</strong></td></tr><tr><td>Session window</td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><em>不支持</em></td><td><em>不支持</em></td><td><em>不支持</em></td><td><em>不支持</em></td></tr><tr><td>Count-based window</td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><em>不支持</em></td><td><em>不支持</em></td><td><em>不支持</em></td></tr><tr><td>Trigger</td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><em>不支持</em></td><td><em>不支持</em></td><td><em>不支持</em></td><td><em>不支持</em></td></tr><tr><td>Event time</td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><em>不支持</em></td><td><strong>支持</strong></td></tr><tr><td>Processing time</td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><em>不支持</em></td><td><strong>支持</strong></td><td><strong>支持</strong></td></tr><tr><td>Ingress time</td><td><em>不支持</em></td><td><em>不支持</em></td><td><em>不支持</em></td><td><em>不支持</em></td><td><em>不支持</em></td><td><strong>支持</strong></td></tr><tr><td>Window输出</td><td>多输出</td><td>多输出</td><td>单输出</td><td>单输出</td><td>单输出</td><td>单输出</td></tr></tbody></table><p>可以看到，目前对 window 支持最完善的流计算框架是 Dataflow 和 Flink；Storm 在最新的 1.0.0 中加入内置的 window 支持，而 Kafka Streams 则是随 Kafka 0.10.0 版本一同释出的新流计算框架，两者对 window 的支持都较为完善，但是否稳定可靠则需要时间的验证；而 Spark 原有的流计算框架 Spark Streaming 由于只支持基于 mini-batch 的 processing-time window，对 window 的支持一直很薄弱，随 Spark 2.0.0 释出的 Structured Streaming 旨在支持 event-time window，补足 Spark 在流处理上的能力，但仍然处于相当早期的阶段，各种 window 特性的支持都有所缺失。鉴于流处理领域对于优秀流处理框架的旺盛需求，未来一定会有更多对 window 支持更完善的流处理框架涌现出来，让我们拭目以待。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-102" target="_blank" rel="noopener">The world beyond batch: Streaming 102</a></li><li><a href="https://ci.apache.org/projects/flink/flink-docs-master/dev/windows.html" target="_blank" rel="noopener">Apache Flink 1.1 Documentation: Windows</a></li><li><a href="http://docs.confluent.io/3.0.0/streams/concepts.html" target="_blank" rel="noopener">Concepts — Confluent Platform 3.0.0 documentation</a></li><li><a href="http://docs.confluent.io/3.0.0/streams/developer-guide.html" target="_blank" rel="noopener">Developer Guide — Confluent Platform 3.0.0 documentation</a></li><li><a href="http://storm.apache.org/releases/1.0.0/Windowing.html" target="_blank" rel="noopener">Windowing Support in Core Storm</a></li><li><a href="http://spark.apache.org/docs/latest/streaming-programming-guide.html" target="_blank" rel="noopener">Spark Streaming - Spark 2.0.0 Documentation</a></li><li><a href="http://spark.apache.org/docs/latest/structured-streaming-programming-guide.html" target="_blank" rel="noopener">Structured Streaming Programming Guide - Spark 2.0.0 Documentation</a></li></ul><p>[^image1-copyright]: 本图摘自 <a href="https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-102，版权归原作者所有" target="_blank" rel="noopener">https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-102，版权归原作者所有</a><br>[^dataflow-version]: Dataflow 为 Google 提供的云服务，由于没有开源，并不清楚其内部版本号</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;流计算是当前备受关注的一个大数据研究与应用领域，旨在实时或近实时地处理大量无界数据。区别于批处理，流处理中处理的数据集是无界的，所以聚集操作（如 reduce、sum、count 等）无法应用于整个数据集，否则聚集操作的结果可能永远都不会输出。我们需要将无界的数据集切分成一些有界的片段，将聚集操作应用于这些片段，从而能够在无界的数据集上得到持续的聚集操作输出结果，这一切分过程即被称为 window。流计算领域的许多概念、系统设计、实现细节都围绕着 window 展开，window 的支持程度也是我们对众多的流计算框架进行选型的重要依据。要理解 window，我们需要回答以下关键问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何根据window进行数据划分？&lt;/li&gt;
&lt;li&gt;如何定义在window相关的操作中涉及的时间概念？&lt;/li&gt;
&lt;li&gt;如何输出基于window的操作的处理结果？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下文将逐一回答这些关键问题，并在最后比较当前较热门的各流计算框架对 window 的支持程度。&lt;/p&gt;
    
    </summary>
    
      <category term="流计算" scheme="http://yoursite.com/categories/%E6%B5%81%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="window" scheme="http://yoursite.com/tags/window/"/>
    
      <category term="streaming" scheme="http://yoursite.com/tags/streaming/"/>
    
      <category term="bigdata" scheme="http://yoursite.com/tags/bigdata/"/>
    
  </entry>
  
  <entry>
    <title>Git Cheat Sheet</title>
    <link href="http://yoursite.com/2017/04/18/git-cheat-sheet/"/>
    <id>http://yoursite.com/2017/04/18/git-cheat-sheet/</id>
    <published>2017-04-18T16:51:08.000Z</published>
    <updated>2017-04-19T18:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Git-本地更改操作"><a href="#Git-本地更改操作" class="headerlink" title="Git 本地更改操作"></a>Git 本地更改操作</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li>初始化一个 Git 仓库：<code>git init</code></li></ul><h3 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h3><ul><li>添加文件到暂存区：<code>git add &lt;file&gt;</code><ul><li>添加所有修改到暂存区：<code>git add .</code></li></ul></li><li>将暂存区的修改提交到版本库：<code>git commit</code> -&gt; 编辑 commit message -&gt; 保存<ul><li>commit message 较简单时，可以：<code>git commit -m &quot;&lt;message&gt;&quot;</code></li></ul></li><li>为文件添加执行权限，并将修改添加到暂存区：<code>git update-index --chmod=+x &lt;file&gt;</code></li></ul><h3 id="回退修改"><a href="#回退修改" class="headerlink" title="回退修改"></a>回退修改</h3><ul><li>回退工作区的修改：<code>git checkout -- &lt;file&gt;</code></li><li>回退工作区的修改，但保存现场：<code>git stash</code><ul><li>恢复现场：<code>git stash pop</code></li><li>查看保存的现场：<code>git stash list</code></li></ul></li><li>回退暂存区的修改到工作区：<code>git reset HEAD &lt;file&gt;</code></li><li>回退版本库的修改到工作区：<code>git reset &lt;commit&gt;</code> 或 <code>git reset –-mixed &lt;commit&gt;</code></li><li>回退版本库的修改到暂存区：<code>git reset –-soft &lt;commit&gt;</code></li><li>回退版本库的修改（<strong>不保留</strong>）：<code>git reset --hard &lt;commit&gt;</code><ul><li>如果错误执行了该回退操作，可以通过 <code>git reflog</code> 查看命令历史，命令历史中记载了回退前的 commit id，可以执行 <code>git reset --hard &lt;commit&gt;</code> 回退该回退操作</li></ul></li><li>回退所有未被跟踪的文件：<code>git clean -df</code></li></ul><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><ul><li>从暂存区 + 工作区中删除：<code>git rm &lt;file&gt;</code></li><li>从暂存区中删除：<code>git rm --cached &lt;file&gt;</code></li></ul><h3 id="跟踪文件"><a href="#跟踪文件" class="headerlink" title="跟踪文件"></a>跟踪文件</h3><ul><li>强制跟踪指定文件：<code>git update-index --no-assume-unchanged &lt;file&gt;</code></li><li>强制不跟踪指定文件：<code>git update-index --assume-unchanged &lt;file&gt;</code></li></ul><a id="more"></a><h2 id="Git-比较操作"><a href="#Git-比较操作" class="headerlink" title="Git 比较操作"></a>Git 比较操作</h2><ul><li>比较工作区和暂存区的指定文件：<code>git diff &lt;path&gt;</code><ul><li>比较所有文件：<code>git diff</code></li></ul></li><li>比较工作区和指定 commit 的指定文件：<code>git diff &lt;commit&gt; &lt;path&gt;</code><ul><li>比较所有文件：<code>git diff &lt;commit&gt;</code></li></ul></li><li>比较暂存区和指定 commit 的指定文件：<code>git diff --cached &lt;commit&gt; &lt;path&gt;</code><ul><li>比较暂存区和 <code>HEAD</code> 的指定文件：<code>git diff --cached &lt;path&gt;</code></li><li>比较所有文件：<code>git diff --cached &lt;commit&gt;</code></li></ul></li><li>比较 commit <code>A</code> 和 commit <code>B</code> 的指定文件：<code>git diff &lt;A&gt; &lt;B&gt; &lt;path&gt;</code><ul><li>比较 <code>HEAD</code> 和 commit <code>B</code> 的指定文件：<code>git diff ..&lt;B&gt; &lt;path&gt;</code></li><li>比较 commit <code>A</code> 和 <code>HEAD</code> 的指定文件：<code>git diff &lt;A&gt;.. &lt;path&gt;</code></li></ul></li><li>比较 commit <code>A</code> 与 commit <code>B</code> 的 merge base 和 commit <code>B</code> 的指定文件：<code>git diff &lt;A&gt;...&lt;B&gt; &lt;path&gt;</code><ul><li>比较 <code>HEAD</code> 与 commit <code>B</code> 的 merge base 和 commit <code>B</code> 的指定文件：<code>git diff ...&lt;B&gt; &lt;path&gt;</code></li><li>比较 commit <code>A</code> 与 <code>HEAD</code> 的 merge base 和 <code>HEAD</code> 的指定文件：<code>git diff &lt;A&gt;... &lt;path&gt;</code></li></ul></li><li><p>使用 difftool 比较文件，命令参数与 <code>git diff</code> 一致，但使用 <code>git difftool</code> 子命令</p><ul><li><p>配置 difftool：</p><p>  编辑 <code>~/.gitconfig</code>：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[diff]</span><br><span class="line">tool = meld</span><br><span class="line">[difftool &quot;meld&quot;]</span><br><span class="line">path = C:\\path\\to\\meld\\Meld.exe</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Git-历史操作"><a href="#Git-历史操作" class="headerlink" title="Git 历史操作"></a>Git 历史操作</h2><ul><li>查看分支合并图：<code>git log --graph</code></li><li><p>配置 <code>git lg</code> 作为查看格式良好的历史记录的命令：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[alias]</span><br><span class="line">lg = log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit</span><br></pre></td></tr></table></figure></li></ul><h2 id="Git-分支操作"><a href="#Git-分支操作" class="headerlink" title="Git 分支操作"></a>Git 分支操作</h2><ul><li>查看当前分支：<code>git branch</code></li><li>基于当前分支创建新分支：<code>git branch &lt;name&gt;</code><ul><li>基于当前分支创建并切换到新分支：<code>git checkout -b &lt;name&gt;</code></li><li>基于指定分支创建并切换到新分支：<code>git checkout -b &lt;name&gt; &lt;origin-branch&gt;</code></li></ul></li><li>切换到指定分支：<code>git checkout &lt;name&gt;</code></li><li><p>合并指定分支到当前分支：<code>git merge &lt;name&gt;</code></p><ul><li><p>合并时在指定分支基础上重新提交当前分支从 merge base 开始的 commit：<code>git rebase -i &lt;name&gt;</code></p><ul><li>rebase 时历史会从旧到新显示，编辑历史时有如下 command 可用：<ul><li><code>pick</code>：直接入库</li><li><code>edit</code>：在入库前允许重新编辑 commit</li><li><code>reword</code>：在入库前允许重新编辑 commit message</li><li><code>squash</code>：与前次提交进行 commit 合并</li><li><code>fixup</code>：同 <code>squash</code>，但丢弃 commit message</li></ul></li><li><p>示例</p><ul><li><p>原始 log 如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">debug: commit1</span><br><span class="line">debug: commit2</span><br><span class="line">debug: commit3</span><br><span class="line">fix: commit4</span><br></pre></td></tr></table></figure></li><li><p>使用以下 command：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pick debug: commit1</span><br><span class="line">fixup debug: commit2</span><br><span class="line">fixup debug: commit3</span><br><span class="line">squash fix: commit4</span><br></pre></td></tr></table></figure></li><li><p>结果：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fix: commit4</span><br></pre></td></tr></table></figure></li></ul></li><li><p>继续检查下个 commit：<code>git rebase --continue</code></p></li><li>取消本次 rebase：<code>git rebase --abort</code></li></ul></li><li><p>使用指定工具进行 merge 操作：<code>git mergetool</code></p><ul><li><p>配置 merge 工具：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[merge]</span><br><span class="line">tool = meld</span><br><span class="line">[mergetool &quot;meld&quot;]</span><br><span class="line">path = C:\\path\\to\\meld\\Meld.exe</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>删除指定分支：<code>git branch -d &lt;name&gt;</code></p><ul><li>删除未合并分支：<code>git branch -D &lt;name&gt;</code></li></ul></li></ul><h2 id="Git-远程仓库操作"><a href="#Git-远程仓库操作" class="headerlink" title="Git 远程仓库操作"></a>Git 远程仓库操作</h2><ul><li>克隆远程仓库到当前目录：<code>git clone &lt;repo-url&gt;</code><ul><li>克隆远程仓库到指定目录：<code>git clone &lt;repo-url&gt; &lt;dir&gt;</code><ul><li><code>&lt;dir&gt;</code> 目录下会出现 <code>.git</code> 目录</li></ul></li></ul></li><li>关联远程仓库：<code>git remote add &lt;repo-name&gt; &lt;repo-url&gt;</code><ul><li><code>&lt;repo-name&gt;</code> 惯例命名为 <code>origin</code></li><li><code>&lt;repo-url&gt;</code> 一般格式为 <code>git@server-name:path/repo-name.git</code></li></ul></li><li>查看远程仓库信息：<code>git remote -v</code></li><li>拖取指定远程仓库：<code>git fetch &lt;repo-name&gt;</code></li><li>拖取指定远程仓库的指定分支然后合并到当前分支：<code>git pull &lt;repo-name&gt; &lt;branch-name&gt;</code></li><li>推送指定分支到指定远程仓库：<code>git push &lt;repo-name&gt; &lt;branch-name&gt;</code><ul><li>推送当前分支到指定远程仓库：<code>git push &lt;repo-name&gt;</code></li><li>推送当前分支到上游仓库：<code>git push</code><ul><li>要配置指定远程仓库为上游仓库，可以：<ul><li>在第一次推送时使用 <code>-u</code> 指定：<code>git push -u &lt;repo-name&gt; &lt;branch-name&gt;</code></li><li>直接配置：<code>git branch --set-upstream &lt;branch-name&gt; &lt;repo-name&gt;/&lt;branch-name&gt;</code></li></ul></li></ul></li></ul></li><li>删除指定远程仓库的指定分支：<code>git push &lt;repo-name&gt; :&lt;branch-name&gt;</code><ul><li>如果由于远程仓库的 <code>HEAD</code> 指向待删除的分支而无法进行删除操作，可以先把 <code>HEAD</code> 指向其他分支，在远程仓库上进行以下操作：<code>git symbolic-ref HEAD refs/heads/&lt;other-branch-name&gt;</code>，在删除分支后再切换回来</li></ul></li></ul><h2 id="Git-标签操作"><a href="#Git-标签操作" class="headerlink" title="Git 标签操作"></a>Git 标签操作</h2><ul><li>基于 <code>HEAD</code> 新建标签：<code>git tag &lt;name&gt;</code><ul><li>基于指定 commit 新建标签：<code>git tag &lt;name&gt; &lt;commit&gt;</code></li><li>指定标签信息：<code>git tag -m &lt;message&gt; &lt;name&gt;</code></li><li>使用PGP签名标签：<code>git tag -s &lt;name&gt;</code></li></ul></li><li>查看标签：<code>git tag</code></li><li>推送指定标签到指定远程仓库：<code>git push &lt;repo-name&gt; &lt;tag-name&gt;</code><ul><li>推送全部标签到指定远程仓库：<code>git push &lt;repo-name&gt; --tags</code></li></ul></li><li>在指定远程仓库删除指定标签：<code>git push &lt;repo-name&gt; :refs/tags/&lt;tag-name&gt;</code></li></ul><h2 id="Git-子模块操作"><a href="#Git-子模块操作" class="headerlink" title="Git 子模块操作"></a>Git 子模块操作</h2><ul><li>添加 submodule：<code>git submodule add -b &lt;branch&gt; --name &lt;name&gt; &lt;repo&gt; &lt;path&gt;</code></li><li>查看 submodule 状态：<code>git submodule status</code></li><li><p>clone 含 submodule 的项目</p><ul><li>方法一：<code>git clone &lt;repo&gt; --recursive</code></li><li><p>方法二：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repo&gt;</span><br><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除 submodule：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git deinit &lt;path&gt;</span><br><span class="line">git rm --cached &lt;path&gt;</span><br><span class="line">rm -rf &lt;path&gt;</span><br><span class="line">[edit .gitmodules to remove submodule item]</span><br></pre></td></tr></table></figure></li><li><p>在 submodule 中执行命令：<code>git submodule foreach &lt;command&gt;</code></p></li><li>更新 submodule：<code>git submodule update --recursive --remote</code></li></ul><h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><ul><li><p>配置 committer：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &lt;user-name&gt;</span><br><span class="line">git config --global user.email &lt;user-email&gt;</span><br></pre></td></tr></table></figure></li><li><p>让命令行输出显示颜色：<code>git config --global color.ui true</code></p></li><li>让 non-bare repo 能被 push：<code>git config receive.denyCurrentBranch updateInstead</code></li><li>让 Git 不要自动转换 CRLF：<code>git config --global core.autocrlf false</code></li><li>让 Git 忽视文件的 mode 变化：<code>git config --global core.fileMode false</code></li><li><p>为复杂操作配置别名：</p><ul><li><p>示例：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[alias]</span><br><span class="line">sy = &quot;!f() &#123; git status; git add .; git commit; git push origin-test $&#123;1&#125;; &#125;; f&quot;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置 Git 的自动补全和命令行 prompt：</p><p>  在 <code>~/.bashrc</code> 中加入如下配置：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="variable">$&#123;GIT_SOURCE_DIR&#125;</span>/contrib/completion/git-completion.bash</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$&#123;GIT_SOURCE_DIR&#125;</span>/contrib/completion/git-prompt.sh</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> color_my_prompt &#123;</span><br><span class="line">    <span class="built_in">local</span> __user_and_host=<span class="string">"\[\033[01;32m\]\u@\h"</span></span><br><span class="line">    <span class="built_in">local</span> __cur_location=<span class="string">"\[\033[01;34m\]\w"</span></span><br><span class="line">    <span class="built_in">local</span> __git_branch_color=<span class="string">"\[\033[31m\]"</span></span><br><span class="line">    <span class="built_in">local</span> __git_branch=<span class="string">'`git branch 2&gt; /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\(\\\\\1\)\ /`'</span></span><br><span class="line">    <span class="built_in">local</span> __prompt_tail=<span class="string">"\[\033[35m\]$"</span></span><br><span class="line">    <span class="built_in">local</span> __last_color=<span class="string">"\[\033[00m\]"</span></span><br><span class="line">    <span class="built_in">export</span> PS1=<span class="string">"<span class="variable">$__user_and_host</span> <span class="variable">$__cur_location</span> <span class="variable">$__git_branch_color</span><span class="variable">$__git_branch</span><span class="variable">$__prompt_tail</span><span class="variable">$__last_color</span> "</span></span><br><span class="line">&#125;</span><br><span class="line">color_my_prompt</span><br></pre></td></tr></table></figure></li></ul><h2 id="豆知识"><a href="#豆知识" class="headerlink" title="豆知识"></a>豆知识</h2><h3 id="commit-别名"><a href="#commit-别名" class="headerlink" title="commit 别名"></a>commit 别名</h3><p>在 Git 中，<code>HEAD</code> 表示当前版本，也就是最新的提交，上一个版本就是 <code>HEAD^</code>，上上一个版本就是 <code>HEAD^^</code>，上100个版本写成 <code>HEAD~100</code>。</p><h3 id="dry-run"><a href="#dry-run" class="headerlink" title="dry run"></a>dry run</h3><p>很多命令都有 <code>-n</code> 或 <code>--dry-run</code> 选项，使用了该选项后，命令不会直接运行，而是输出它将执行的内容，供用户判断执行的内容是否和预期一致，从而决定是否实际执行该命令。这避免了一些手误的情况，在某些重要的操作上很有用。</p><h3 id=""><a href="#" class="headerlink" title="--"></a><code>--</code></h3><p>Git 的命令中常含有 <code>--</code>，它用来分割 Git 命令的选项和文件/文件列表，以防某些文件名被误认为是选项。</p><h3 id="在-Windows-下启动-Git-server"><a href="#在-Windows-下启动-Git-server" class="headerlink" title="在 Windows 下启动 Git server"></a>在 Windows 下启动 Git server</h3><p>将指定目录下所有的仓库都通过 Git server 暴露给其他人：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git daemon --base-path=/path/to/workplace --<span class="built_in">export</span>-all</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git-本地更改操作&quot;&gt;&lt;a href=&quot;#Git-本地更改操作&quot; class=&quot;headerlink&quot; title=&quot;Git 本地更改操作&quot;&gt;&lt;/a&gt;Git 本地更改操作&lt;/h2&gt;&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;初始化一个 Git 仓库：&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;提交修改&quot;&gt;&lt;a href=&quot;#提交修改&quot; class=&quot;headerlink&quot; title=&quot;提交修改&quot;&gt;&lt;/a&gt;提交修改&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;添加文件到暂存区：&lt;code&gt;git add &amp;lt;file&amp;gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;添加所有修改到暂存区：&lt;code&gt;git add .&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将暂存区的修改提交到版本库：&lt;code&gt;git commit&lt;/code&gt; -&amp;gt; 编辑 commit message -&amp;gt; 保存&lt;ul&gt;
&lt;li&gt;commit message 较简单时，可以：&lt;code&gt;git commit -m &amp;quot;&amp;lt;message&amp;gt;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为文件添加执行权限，并将修改添加到暂存区：&lt;code&gt;git update-index --chmod=+x &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;回退修改&quot;&gt;&lt;a href=&quot;#回退修改&quot; class=&quot;headerlink&quot; title=&quot;回退修改&quot;&gt;&lt;/a&gt;回退修改&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;回退工作区的修改：&lt;code&gt;git checkout -- &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;回退工作区的修改，但保存现场：&lt;code&gt;git stash&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;恢复现场：&lt;code&gt;git stash pop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看保存的现场：&lt;code&gt;git stash list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;回退暂存区的修改到工作区：&lt;code&gt;git reset HEAD &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;回退版本库的修改到工作区：&lt;code&gt;git reset &amp;lt;commit&amp;gt;&lt;/code&gt; 或 &lt;code&gt;git reset –-mixed &amp;lt;commit&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;回退版本库的修改到暂存区：&lt;code&gt;git reset –-soft &amp;lt;commit&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;回退版本库的修改（&lt;strong&gt;不保留&lt;/strong&gt;）：&lt;code&gt;git reset --hard &amp;lt;commit&amp;gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;如果错误执行了该回退操作，可以通过 &lt;code&gt;git reflog&lt;/code&gt; 查看命令历史，命令历史中记载了回退前的 commit id，可以执行 &lt;code&gt;git reset --hard &amp;lt;commit&amp;gt;&lt;/code&gt; 回退该回退操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;回退所有未被跟踪的文件：&lt;code&gt;git clean -df&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;删除文件&quot;&gt;&lt;a href=&quot;#删除文件&quot; class=&quot;headerlink&quot; title=&quot;删除文件&quot;&gt;&lt;/a&gt;删除文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;从暂存区 + 工作区中删除：&lt;code&gt;git rm &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;从暂存区中删除：&lt;code&gt;git rm --cached &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;跟踪文件&quot;&gt;&lt;a href=&quot;#跟踪文件&quot; class=&quot;headerlink&quot; title=&quot;跟踪文件&quot;&gt;&lt;/a&gt;跟踪文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;强制跟踪指定文件：&lt;code&gt;git update-index --no-assume-unchanged &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;强制不跟踪指定文件：&lt;code&gt;git update-index --assume-unchanged &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Cheat Sheet" scheme="http://yoursite.com/categories/Cheat-Sheet/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="cheat-sheet" scheme="http://yoursite.com/tags/cheat-sheet/"/>
    
  </entry>
  
  <entry>
    <title>使用 Travis 自动部署博客到 Github Pages</title>
    <link href="http://yoursite.com/2017/04/15/continuous-deployment-blog-to-github-pages-with-travis/"/>
    <id>http://yoursite.com/2017/04/15/continuous-deployment-blog-to-github-pages-with-travis/</id>
    <published>2017-04-16T01:12:50.000Z</published>
    <updated>2017-04-16T06:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于博客的源码和生成站点位于不同的代码仓库中（源码位于 <a href="https://github.com/uchuhimo/uchuhimo.me" target="_blank" rel="noopener">uchuhimo/uchuhimo.me</a>，生成的静态站点位于 <a href="https://github.com/uchuhimo/uchuhimo.github.io" target="_blank" rel="noopener">uchuhimo/uchuhimo.github.io</a>，即个人 GitHub Pages 的仓库），文章的发布过程需要提交两次。作为拥有懒惰这种美德的程序员，自然会开始折腾只需要提交一次、博客就自动部署到 GitHub Pages 上的方法——这里就轮到 Travis 登场了。</p><p>接下来，我会先介绍自动部署的原理，再讲解搭建的过程。</p><a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Travis 为 GitHub 上的开源项目提供免费的持续集成（CI）服务，只要你向指定仓库提交了代码，Travis 就会根据配置自动运行 CI 任务。利用这个特性，我们可以做到在一次提交过程中触发如下流程：</p><ul><li>内容编辑完成，向博客的源码仓库 push 代码</li><li>GitHub 通过 hook 告诉 Travis 有新的提交，Travis 启动新的 CI 任务</li><li>在 CI 任务中，代码被 clone 到 Travis 的构建服务器上</li><li>构建服务器准备好 Node.js 的运行环境，运行 Hexo 的生成命令，并将生成的静态站点 push 到 GitHub Pages 的仓库中，博客部署完成</li></ul><p>这个过程中的难点在于如何给予 Travis push 你的 GitHub Pages 仓库的权限。有两种方法可以获得 push 权限：</p><ul><li>SSH 私钥：只要在 GitHub 上配了相应公钥，就可以通过 SSH 进行 push</li><li>Personal access token：只要在 GitHub 上生成了 personal access token，就可以通过 HTTPS 进行 push</li></ul><p>但是，无论是使用上述的哪种方法，SSH 私钥 / personal access token 都不能出现在 Travis 的配置文件里，因为 Travis 的配置文件（即 <code>.travis.yml</code>）会出现在博客的源码仓库里，这意味着任何能访问你提交历史的路人（对于 GitHub 的公开项目来说，意味着<strong>任何人</strong>）都能获取到它们并用来向你的仓库进行任意提交——这是灾难性的（顺带一提，GitHub 如果发现你的代码仓库中含有 personal access token，会自动删除相应token，因此向仓库提交 personal access token 的行为并不会带来风险，只是没有意义而已，因为 token 会直接失效）。因此，我们需要使用 Travis 客户端对 SSH 私钥 / personal access token 进行加密，然后在 CI 任务中解密并使用它们。</p><p>原理解释先到这里，下面我们直接动手做吧~</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>注册 Travis 并将 Github Pages 的源码项目加入 Travis</li><li>准备一个 Github 的 personal access token</li><li><p>安装 Travis 客户端（加入了惯例的“换国内源”环节，不用谢我^_^）：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install rvm</span></span><br><span class="line">gpg --keyserver hkp://keys.gnupg.net:80 --recv-keys D39DC0E3</span><br><span class="line">\curl -sSL https://get.rvm.io | bash -s stable</span><br><span class="line"><span class="built_in">source</span> /home/uchuhimo/.rvm/scripts/rvm</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"ruby_url=https://cache.ruby-china.org/pub/ruby"</span> &gt; ~/.rvm/user/db</span><br><span class="line"></span><br><span class="line"><span class="comment"># install ruby</span></span><br><span class="line">rvm install 2.4.0</span><br><span class="line">rvm use 2.4.0 --default</span><br><span class="line"></span><br><span class="line"><span class="comment"># configure gem</span></span><br><span class="line">gem sources --add https://gems.ruby-china.org/ --remove http://rubygems.org/</span><br><span class="line"></span><br><span class="line"><span class="comment"># install travis</span></span><br><span class="line">gem install travis</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置-Travis"><a href="#配置-Travis" class="headerlink" title="配置 Travis"></a>配置 Travis</h2><ul><li>在博客的源码项目下新建 <code>.travis.yml</code>：<code>touch .travis.yml</code></li><li>加密上文生成的 personal access token：<code>travis encrypt GITHUB_TOKEN=&quot;&lt;personal-access-token&gt;&quot; --add</code></li><li><p>在 <code>.travis.yml</code> 中添加如下内容（记得替换变量）：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"7"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_deploy:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="comment"># generate static site</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  provider:</span> <span class="string">pages</span> <span class="comment"># deploy to GitHub Pages</span></span><br><span class="line"><span class="attr">  skip_cleanup:</span> <span class="literal">true</span> <span class="comment"># don't clean generated site</span></span><br><span class="line"><span class="attr">  github_token:</span> <span class="string">$GITHUB_TOKEN</span> <span class="comment"># provide the encrypted token</span></span><br><span class="line"><span class="attr">  on:</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">&lt;username&gt;/&lt;github-pages-repo-name&gt;</span> <span class="comment"># optional, defaults to current repo</span></span><br><span class="line"><span class="attr">  local_dir:</span> <span class="string">public</span> <span class="comment"># optional, defaults to the current directory</span></span><br><span class="line"><span class="attr">  target_branch:</span> <span class="string">master</span> <span class="comment"># optional, defaults to "gh-pages"</span></span><br><span class="line"><span class="attr">  fqdn:</span> <span class="string">&lt;custom-domain-url&gt;</span> <span class="comment"># optional</span></span><br><span class="line"><span class="attr">  project_name:</span> <span class="string">&lt;project-name&gt;</span> <span class="comment"># optional, defaults to value of fqdn or repo</span></span><br><span class="line"><span class="attr">  email:</span> <span class="string">&lt;committer-email&gt;</span> <span class="comment"># optional, defaults to "deploy@travis-ci.org"</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">&lt;committer-name&gt;</span> <span class="comment"># optional, defaults to "Deployment Bot"</span></span><br></pre></td></tr></table></figure></li><li><p>提交更改即可触发 Travis 自动更新 Github Pages</p></li><li>到 <code>https://travis-ci.org/&lt;username&gt;/&lt;blog-source-repo-name&gt;</code> 页面查看构建是否成功</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在最终采用上述方案之前，我也看了网上现有的方案，感觉都多多少少有些繁琐，因此在自己折腾出来后才决定分享出来，供大家参考。</p><p>下面是我看到的几个比较靠谱的方案，以供对比：</p><ul><li><p>基于 SSH 的方案：<a href="https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/" target="_blank" rel="noopener">用 Travis CI 自動部署網站到 GitHub</a></p><p>  这是 Hexo 作者 tommy351 自己部署 Hexo 的官方网站用的方案，感觉看完都有点不想折腾了，真的很繁琐。</p></li><li><p>基于 personal access token 的方案：<a href="http://notes.iissnan.com/2016/publishing-github-pages-with-travis-ci/" target="_blank" rel="noopener">使用 Travis CI 自动更新 GitHub Pages</a></p><p>  这是 NexT 作者 iissnan 部署 NexT 文档的方案，使用的和我一样是 personal access token，iissnan 自己撸了提交到 GitHub Pages 的命令，而我直接使用了 Travis 提供的部署插件，会更简单和易维护一些（其实真正的原因是我懒）。另一点不同是 iissnan 使用了 gulp 管理构建过程，而我直接使用 Hexo 的命令进行构建，因此构建的命令会有所不同。</p></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://docs.travis-ci.com/user/deployment/pages/" target="_blank" rel="noopener">GitHub Pages Deployment - Travis CI</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于博客的源码和生成站点位于不同的代码仓库中（源码位于 &lt;a href=&quot;https://github.com/uchuhimo/uchuhimo.me&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;uchuhimo/uchuhimo.me&lt;/a&gt;，生成的静态站点位于 &lt;a href=&quot;https://github.com/uchuhimo/uchuhimo.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;uchuhimo/uchuhimo.github.io&lt;/a&gt;，即个人 GitHub Pages 的仓库），文章的发布过程需要提交两次。作为拥有懒惰这种美德的程序员，自然会开始折腾只需要提交一次、博客就自动部署到 GitHub Pages 上的方法——这里就轮到 Travis 登场了。&lt;/p&gt;
&lt;p&gt;接下来，我会先介绍自动部署的原理，再讲解搭建的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="创世记" scheme="http://yoursite.com/categories/%E5%88%9B%E4%B8%96%E8%AE%B0/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Travis" scheme="http://yoursite.com/tags/Travis/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 Hexo 和 GitHub Pages 搭建这个博客</title>
    <link href="http://yoursite.com/2017/04/11/genesis/"/>
    <id>http://yoursite.com/2017/04/11/genesis/</id>
    <published>2017-04-11T20:29:50.000Z</published>
    <updated>2017-04-22T07:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一个博客的搭建过程分为三步：</p><ul><li>编写：包含内容的书写与格式的配置</li><li>构建：从编写的原始内容生成可发布的最终内容</li><li>发布：让待发布的内容对读者可见</li></ul><p>依托于博客平台（如博客园、新浪博客等）发布内容的用户只需要关注编写部分，但要搭建一个独立的个人博客则以上三方面都需要关心。幸运的是，现在有大量的工具帮助我们简化这个过程：丰富的 Markup 语言简化了编写；强大的静态站点生成器简化了构建；友好的托管平台简化了发布。</p><p>这个博客的诞生也得益于这些工具：</p><ul><li>编写：使用 Markdown，内置大量层级、列表、超链接、代码等的简便语法支持</li><li>构建：使用 Hexo，几条命令完成生成、预览、发布步骤</li><li>发布：使用 GitHub Pages 进行托管，方便又免费</li></ul><p>接下来我会按以下顺序介绍如何基于这些工具完成整个博客的搭建过程：</p><ul><li>环境准备</li><li>Hexo 和 NexT 主题的使用</li><li>GitHub Pages 的配置与部署</li><li>绑定自定义域名（可选）</li><li>Hexo 的详细配置过程</li></ul><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><p>安装 Node.js</p><p>  官网下载：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><p>  更换成国内镜像源：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[edit ~/.npmrc]</span><br><span class="line">registry=https://registry.npm.taobao.org</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure></li><li><p>安装 Hexo</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li></ul><h2 id="常用-Hexo-命令"><a href="#常用-Hexo-命令" class="headerlink" title="常用 Hexo 命令"></a>常用 Hexo 命令</h2><ul><li>初始化目录：<code>hexo init [folder]</code></li><li>新建文章：<code>hexo new [layout] &lt;title&gt;</code> 或 <code>hexo n [layout] &lt;title&gt;</code><ul><li>新建草稿：<code>hexo new draft &lt;title&gt;</code></li></ul></li><li>将草稿发布为正式文章：<code>hexo publish &lt;title&gt;</code></li><li>生成静态文件：<code>hexo generate</code> 或 <code>hexo g</code><ul><li>监听文件变化：<code>hexo g --watch</code> 或 <code>hexo g -w</code></li></ul></li><li>部署：<code>hexo deploy</code> 或 <code>hexo d</code><ul><li>先生成后部署：<code>hexo d -g</code></li></ul></li><li>启动本地服务器（服务器会监听文件变化并自动更新）：<code>hexo server</code> 或 <code>hexo s</code><ul><li>启动调试：<code>hexo s --debug</code></li><li>预览草稿：<code>hexo s --draft</code></li></ul></li><li>清除缓存：<code>hexo clean</code></li></ul><h2 id="使用-NexT-主题"><a href="#使用-NexT-主题" class="headerlink" title="使用 NexT 主题"></a>使用 NexT 主题</h2><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;your-hexo-site&gt;</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>编辑 <code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><h3 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h3><p>编辑 <code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br></pre></td></tr></table></figure><h3 id="查看是否生效"><a href="#查看是否生效" class="headerlink" title="查看是否生效"></a>查看是否生效</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h2 id="创建-GitHub-Pages"><a href="#创建-GitHub-Pages" class="headerlink" title="创建 GitHub Pages"></a>创建 GitHub Pages</h2><p>在自己的 GitHub 账号下创建名为 <code>&lt;username&gt;.github.io</code> 的项目即可。</p><h2 id="部署博客到-GitHub-Pages"><a href="#部署博客到-GitHub-Pages" class="headerlink" title="部署博客到 GitHub Pages"></a>部署博客到 GitHub Pages</h2><h3 id="设置-ssh-访问-GitHub-仓库"><a href="#设置-ssh-访问-GitHub-仓库" class="headerlink" title="设置 ssh 访问 GitHub 仓库"></a>设置 ssh 访问 GitHub 仓库</h3><ul><li>生成 ssh key ：<code>ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code></li><li>在 GitHub -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key 添加 <code>~/.ssh/id_rsa.pub</code> 中的内容</li></ul><h3 id="安装-git-deploy-插件"><a href="#安装-git-deploy-插件" class="headerlink" title="安装 git-deploy 插件"></a>安装 git-deploy 插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="配置-git-deploy-插件"><a href="#配置-git-deploy-插件" class="headerlink" title="配置 git-deploy 插件"></a>配置 git-deploy 插件</h3><p>编辑 <code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h2 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h2><ol><li>在万网申请域名：<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">https://wanwang.aliyun.com/</a><ul><li>其他可供选择的域名服务商：<ul><li><a href="https://godaddy.com" target="_blank" rel="noopener">GoDaddy</a>：世界上最大的域名注册商，但续费比较贵</li><li><a href="https://my.freenom.com/domains.php" target="_blank" rel="noopener">freenom</a>：可以找到免费的域名，但都是很奇怪的后缀，比如.ml（感觉做机器学习的初创公司可以弄来玩玩，反正不要钱wwww）</li><li>不同域名服务商的详细对比（主要是价格）：<a href="https://www.domcomp.com" target="_blank" rel="noopener">Domain Name Price and Availability</a></li></ul></li></ul></li><li>注册 DNSPOD：<a href="https://www.dnspod.cn" target="_blank" rel="noopener">https://www.dnspod.cn</a></li><li>在 DNSPOD 的控制台选择：域名解析 -&gt; 全部域名 -&gt; 添加域名，将在万网申请到的域名填入</li><li>在万网的域名控制台的相应域名依次选择：管理 -&gt; 基本信息 -&gt; 修改 DNS，将 DNS 修改为 DNSPOD 的 DNS：<code>f1g1ns1.dnspod.net</code> 和 <code>f1g1ns2.dnspod.net</code></li><li>在 DNSPOD 的控制台选择相应域名并添加记录，主机记录使用 “@”，记录类型选择 “CNAME”，记录值使用 “<code>&lt;username&gt;.github.io</code>“，保存</li><li><p>在 Hexo 中绑定域名：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[create/edit <span class="built_in">source</span>/CNAME]</span><br><span class="line">&lt;your-domain-name&gt;</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure></li><li><p>重新部署，并等待 DNS 生效</p></li></ol><p>如果需要绑定多个域名，可以将 GitHub Pages 绑定到其中一个域名，并把其他域名重定向到该域名。在 DNSPOD 中，这可以通过在需要重定向的域名中添加类型为”显性URL”的记录实现。具体请参考”<a href="https://support.dnspod.cn/Kb/showarticle/tsid/21/" target="_blank" rel="noopener">隐/显性转发</a>“和”<a href="https://support.dnspod.cn/Kb/showarticle/tsid/112/" target="_blank" rel="noopener">DNSPod 支持域名301重定向吗？</a>“。</p><h2 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h2><h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>编辑 <code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span> <span class="string">&lt;avatar-url&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加标签页面"><a href="#添加标签页面" class="headerlink" title="添加标签页面"></a>添加标签页面</h3><ul><li><p>新建页面：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure></li><li><p>设置页面（编辑 <code>source/tags/index.md</code>）：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li><li><p>修改菜单（编辑 <code>themes/next/_config.yml</code>）：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="添加分类页面"><a href="#添加分类页面" class="headerlink" title="添加分类页面"></a>添加分类页面</h3><ul><li><p>新建页面：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure></li><li><p>设置页面（编辑 <code>source/categories/index.md</code>）：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li><li><p>修改菜单（编辑 <code>themes/next/_config.yml</code>）：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/categories</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="添加-about-页面"><a href="#添加-about-页面" class="headerlink" title="添加 about 页面"></a>添加 about 页面</h3><ul><li><p>新建页面：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure></li><li><p>设置页面（编辑 <code>source/about/index.md</code>）</p></li><li><p>修改菜单（编辑 <code>themes/next/_config.yml</code>）：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="首页文章显示摘要"><a href="#首页文章显示摘要" class="headerlink" title="首页文章显示摘要"></a>首页文章显示摘要</h3><p>在文章中适当位置插入 <code>&lt;!--more--&gt;</code>，该位置之前的部分即为摘要，会显示在首页中。</p><h3 id="显示文章更新时间"><a href="#显示文章更新时间" class="headerlink" title="显示文章更新时间"></a>显示文章更新时间</h3><p>编辑 <code>themes/next/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line"><span class="attr">  updated_at:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>文章更新时间默认使用文件的修改时间，如果想自己指定，可以在文章的 Front-matter （即文件最上方以 <code>---</code> 分隔的区域）中加入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">updated:</span> <span class="string">&lt;update-time&gt;</span></span><br></pre></td></tr></table></figure><p>其中，<code>&lt;update-time&gt;</code> 的格式示例为 <code>2017-04-11 16:29:50</code>。</p><h3 id="设置代码高亮"><a href="#设置代码高亮" class="headerlink" title="设置代码高亮"></a>设置代码高亮</h3><p>编辑 <code>themes/next/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Available value:</span></span><br><span class="line"><span class="comment">#    normal | night | night eighties | night blue | night bright</span></span><br><span class="line"><span class="comment"># https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">normal</span></span><br></pre></td></tr></table></figure><h3 id="添加-Creative-Commons-署名协议"><a href="#添加-Creative-Commons-署名协议" class="headerlink" title="添加 Creative Commons 署名协议"></a>添加 Creative Commons 署名协议</h3><p>编辑 <code>themes/next/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Declare license on posts</span></span><br><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># http://creativecommons.org/</span></span><br><span class="line"><span class="comment"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"><span class="attr">creative_commons:</span> <span class="string">by</span></span><br><span class="line"></span><br><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  license:</span> <span class="string">CC</span> <span class="string">BY</span> <span class="number">4.0</span></span><br><span class="line"><span class="attr">  license_url:</span> <span class="attr">http://creativecommons.org/licenses/by/4.0/</span></span><br></pre></td></tr></table></figure><h3 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h3><p>使用 <a href="https://disqus.com" target="_blank" rel="noopener">Disqus</a> 作为评论系统。需要注意的是，Disqus 已经被墙，所以不翻墙是看不到的，只能相信大家都是带着梯子来的了。。。</p><p>编辑 <code>themes/next/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disqus</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  shortname:</span> <span class="string">&lt;your-shortname&gt;</span></span><br><span class="line"><span class="attr">  count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>也可以使用<a href="https://livere.com" target="_blank" rel="noopener">来必力</a>代替 Disqus，编辑 <code>themes/next/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">livere_uid:</span> <span class="string">&lt;your-uid&gt;</span></span><br></pre></td></tr></table></figure><h3 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h3><p>编辑 <code>themes/next/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Social links</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/your-user-name</span></span><br><span class="line"><span class="attr">  Twitter:</span> <span class="attr">https://twitter.com/your-user-name</span></span><br><span class="line">  <span class="string">微博:</span> <span class="attr">http://weibo.com/your-user-name</span></span><br><span class="line">  <span class="string">豆瓣:</span> <span class="attr">http://douban.com/people/your-user-name</span></span><br><span class="line">  <span class="string">知乎:</span> <span class="attr">http://www.zhihu.com/people/your-user-name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Social Icons</span></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Icon Mappings</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  Twitter:</span> <span class="string">twitter</span></span><br><span class="line">  <span class="string">微博:</span> <span class="string">weibo</span></span><br></pre></td></tr></table></figure><h3 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h3><p>编辑 <code>themes/next/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward_comment:</span> <span class="string">坚持原创技术分享，您的支持将鼓励我继续创作！</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="string">/path/to/wechat-reward-image</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/path/to/alipay-reward-image</span></span><br></pre></td></tr></table></figure><h3 id="腾讯公益404页面"><a href="#腾讯公益404页面" class="headerlink" title="腾讯公益404页面"></a>腾讯公益404页面</h3><p>编辑 <code>source/404.html</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"https://qzone.qq.com/gy/404/style/404style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/plain"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"/"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">homePageName</span>=<span class="string">"回到我的主页"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/data.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/page.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="站点建立时间"><a href="#站点建立时间" class="headerlink" title="站点建立时间"></a>站点建立时间</h3><p>编辑 <code>themes/next/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">since:</span> <span class="number">2017</span></span><br></pre></td></tr></table></figure><h3 id="阅读次数统计"><a href="#阅读次数统计" class="headerlink" title="阅读次数统计"></a>阅读次数统计</h3><p>使用不蒜子统计，编辑 <code>themes/next/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show PV/UV of the website/page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="comment"># count values only if the other configs are false</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># custom uv span for the whole site</span></span><br><span class="line"><span class="attr">  site_uv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_uv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-user"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="attr">  site_uv_footer:</span></span><br><span class="line">  <span class="comment"># custom pv span for the whole site</span></span><br><span class="line"><span class="attr">  site_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-eye"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="attr">  site_pv_footer:</span></span><br><span class="line">  <span class="comment"># custom pv span for one page only</span></span><br><span class="line"><span class="attr">  page_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  page_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-eye"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="attr">  page_pv_footer:</span></span><br></pre></td></tr></table></figure><h3 id="集成搜索服务"><a href="#集成搜索服务" class="headerlink" title="集成搜索服务"></a>集成搜索服务</h3><p>使用本地搜索，按以下步骤配置：</p><ul><li><p>安装 hexo-generator-searchdb 插件：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>_config.yml</code>：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>themes/next/_config.yml</code>：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><p>本地搜索的一个替代方案是 Algolia，按以下步骤配置：</p><ul><li>前往 <a href="https://www.algolia.com/" target="_blank" rel="noopener">Algolia 注册页面</a>注册一个新账户。注册后的 14 天内拥有所有功能（包括收费类别的），之后若未续费会自动降级为免费账户，免费账户总共有 10,000 条记录，每月有 100,000 的可操作数。注册完成后，创建一个新的 Index。</li><li><p>安装 hexo-algolia 插件（默认使用的 0.1.1 版本会出现问题，必须指定 0.2.0 版本）：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-algolia@0.2.0</span><br></pre></td></tr></table></figure></li><li><p>在 Algolia 网站上找到需要使用的配置值，包括 ApplicationID、Search API Key、Admin API Key。</p><p>  编辑 <code>_config.yml</code>：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">algolia:</span></span><br><span class="line"><span class="attr">  applicationID:</span> <span class="string">&lt;application-id&gt;</span></span><br><span class="line"><span class="attr">  apiKey:</span> <span class="string">&lt;search-api-key&gt;</span></span><br><span class="line"><span class="attr">  indexName:</span> <span class="string">&lt;index-name&gt;</span></span><br><span class="line"><span class="attr">  chunkSize:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><p>  由于 Admin API Key 需要保密保存，我们在一个单独的文件 <code>_config.private.yml</code> 中配置它：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">algolia:</span></span><br><span class="line"><span class="attr">  adminApiKey:</span> <span class="string">&lt;admin-api-key&gt;</span></span><br></pre></td></tr></table></figure><p>  如果使用了 Git 进行源码管理的话，在 <code>.gitignore</code> 中忽略 <code>_config.private.yml</code> 和 <code>_multiconfig.yml</code> （这是在更新 Index 过程中合并 <code>_config.yml</code> 和 <code>_config.private.yml</code> 的内容生成的文件，里面也包含 Admin API Key），防止 Admin API Key 被公开到 GitHub 等托管网站上。</p></li><li><p>执行以下命令更新 Index：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo algolia --config _config.yml,_config.private.yml</span><br></pre></td></tr></table></figure><p>  需要注意的是，在 3.3.1 版本的 Hexo 中，该命令会出现下列报错信息：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">21:15:11.652 ERROR Local hexo not found in C:\projects\archive\xxx</span><br><span class="line">11:15:11.654 ERROR Try running: &apos;npm install hexo --save&apos;</span><br></pre></td></tr></table></figure><p>  这是 Hexo 的 bug，具体请参考：</p><ul><li><a href="https://github.com/hexojs/hexo/issues/2518" target="_blank" rel="noopener">ERROR when trying to use two alternative configs · Issue #2518 · hexojs/hexo</a></li><li><p><a href="https://github.com/hexojs/hexo/pull/2520" target="_blank" rel="noopener">Fix multiple config issue #2518 by NoahDragon · Pull Request #2520 · hexojs/hexo</a></p><p>该 bug 已在该 commit 中修复：<a href="https://github.com/hexojs/hexo/commit/fbdee9043655a89fe0284f61cbaae88fd9a783e9" target="_blank" rel="noopener">Fix multiple config issue #2518 (#2520) · hexojs/hexo@fbdee90</a>，并在 3.3.5 版本中 release。</p></li></ul></li><li><p>编辑 <code>themes/next/_config.yml</code>：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Algolia Search</span></span><br><span class="line"><span class="attr">algolia_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  hits:</span></span><br><span class="line"><span class="attr">    per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line"><span class="attr">    hits_empty:</span> <span class="string">"We didn't find any results for the search: $&#123;query&#125;"</span></span><br><span class="line"><span class="attr">    hits_stats:</span> <span class="string">"$&#123;hits&#125; results found in $&#123;time&#125; ms"</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="添加-sitemap-插件"><a href="#添加-sitemap-插件" class="headerlink" title="添加 sitemap 插件"></a>添加 sitemap 插件</h3><p>安装 hexo-generator-sitemap 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>配置（编辑 <code>_config.yml</code>）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure><h3 id="添加蜘蛛协议-robots-txt"><a href="#添加蜘蛛协议-robots-txt" class="headerlink" title="添加蜘蛛协议 robots.txt"></a>添加蜘蛛协议 robots.txt</h3><p>新建 <code>source/robots.txt</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /CNAME</span><br><span class="line">Disallow: /README</span><br><span class="line"></span><br><span class="line">Allow: /</span><br><span class="line">Allow: /about/</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /categories/</span><br><span class="line">Allow: /tags/</span><br><span class="line"></span><br><span class="line">Allow: /css/</span><br><span class="line">Allow: /images/</span><br><span class="line">Allow: /js/</span><br><span class="line">Allow: /lib/</span><br><span class="line"></span><br><span class="line">Sitemap: &lt;your-domain-name&gt;/sitemap.xml</span><br></pre></td></tr></table></figure><h3 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h3><p>安装 hexo-generator-feed 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>配置（编辑 <code>_config.yml</code>）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">20</span> <span class="comment"># Maximum number of posts in the feed (Use 0 or false to show all posts)</span></span><br><span class="line"><span class="attr">  hub:</span></span><br><span class="line"><span class="attr">  content:</span></span><br></pre></td></tr></table></figure><h3 id="添加脚注-上标-下标-缩写支持"><a href="#添加脚注-上标-下标-缩写支持" class="headerlink" title="添加脚注/上标/下标/缩写支持"></a>添加脚注/上标/下标/缩写支持</h3><p>由于 Hexo 默认使用的 Markdown renderer 是 <a href="https://github.com/hexojs/hexo-renderer-marked" target="_blank" rel="noopener">marked</a>，它不支持脚注/上标/下标/缩写，我们可以使用 <a href="https://github.com/celsomiranda/hexo-renderer-markdown-it" target="_blank" rel="noopener">Markdown-it</a> 替代 marked：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-markdown-it --save</span><br></pre></td></tr></table></figure><p>配置（编辑 <code>_config.yml</code>）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Markdown-it config</span></span><br><span class="line"><span class="comment">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class="line"><span class="attr">markdown:</span></span><br><span class="line"><span class="attr">  render:</span></span><br><span class="line"><span class="attr">    html:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    breaks:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    linkify:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    typographer:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    quotes:</span> <span class="string">'“”‘’'</span></span><br><span class="line"><span class="attr">  plugins:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">markdown-it-abbr</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">markdown-it-footnote</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">markdown-it-ins</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">markdown-it-sub</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">markdown-it-sup</span></span><br><span class="line"><span class="attr">  anchors:</span></span><br><span class="line"><span class="attr">    level:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">    collisionSuffix:</span> <span class="string">'v'</span></span><br><span class="line"><span class="attr">    permalink:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    permalinkClass:</span> <span class="string">header-anchor</span></span><br><span class="line"><span class="attr">    permalinkSymbol:</span> <span class="string">¶</span></span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="noopener">hexo你的博客 | 不如</a></li><li><a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/" target="_blank" rel="noopener">手把手教你使用Hexo + Github Pages搭建个人独立博客 | 令狐葱@前端笔记</a></li><li><a href="https://hexo.io/docs/" target="_blank" rel="noopener">Documentation | Hexo</a></li><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT 使用文档</a></li><li><a href="http://oomusou.io/hexo/hexo-draft/" target="_blank" rel="noopener">如何使用Hexo寫草稿? | 點燈坊</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个博客的搭建过程分为三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写：包含内容的书写与格式的配置&lt;/li&gt;
&lt;li&gt;构建：从编写的原始内容生成可发布的最终内容&lt;/li&gt;
&lt;li&gt;发布：让待发布的内容对读者可见&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依托于博客平台（如博客园、新浪博客等）发布内容的用户只需要关注编写部分，但要搭建一个独立的个人博客则以上三方面都需要关心。幸运的是，现在有大量的工具帮助我们简化这个过程：丰富的 Markup 语言简化了编写；强大的静态站点生成器简化了构建；友好的托管平台简化了发布。&lt;/p&gt;
&lt;p&gt;这个博客的诞生也得益于这些工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写：使用 Markdown，内置大量层级、列表、超链接、代码等的简便语法支持&lt;/li&gt;
&lt;li&gt;构建：使用 Hexo，几条命令完成生成、预览、发布步骤&lt;/li&gt;
&lt;li&gt;发布：使用 GitHub Pages 进行托管，方便又免费&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我会按以下顺序介绍如何基于这些工具完成整个博客的搭建过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;环境准备&lt;/li&gt;
&lt;li&gt;Hexo 和 NexT 主题的使用&lt;/li&gt;
&lt;li&gt;GitHub Pages 的配置与部署&lt;/li&gt;
&lt;li&gt;绑定自定义域名（可选）&lt;/li&gt;
&lt;li&gt;Hexo 的详细配置过程&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="创世记" scheme="http://yoursite.com/categories/%E5%88%9B%E4%B8%96%E8%AE%B0/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
      <category term="NexT" scheme="http://yoursite.com/tags/NexT/"/>
    
  </entry>
  
</feed>
